<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 愚直プログラマ</title>
    <link>https://www.tsuzuki817.com/posts/</link>
    <description>Recent content in Posts on 愚直プログラマ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 12 Mar 2021 04:08:10 +0900</lastBuildDate><atom:link href="https://www.tsuzuki817.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Flutterチュートリアルやってみた part2</title>
      <link>https://www.tsuzuki817.com/posts/flutter/flutter-tutorial-part2/</link>
      <pubDate>Fri, 12 Mar 2021 04:08:10 +0900</pubDate>
      
      <guid>https://www.tsuzuki817.com/posts/flutter/flutter-tutorial-part2/</guid>
      <description>参考 作業リポジトリ =&amp;gt; https://github.com/tsuzukihashi/flutter-tutorial-part01  環境  作業日: 2020/03/12 OS: macOS Big Sur 11.2.1 PC: MacBook Pro (13-inch, M1, 2020)  はじめに 前回に引き続きpart2をやっていきたいと思います。
part2では画面の遷移とテーマカラーの変更がテーマのようです！
前回までのコードは、こちらで！
https://github.com/tsuzukihashi/flutter-tutorial-part01
今回の作業ディレクトリは以下です。
https://github.com/tsuzukihashi/fulutter-tutorial-part02
step 0 migrate 最近Flutter2が発表されたので、チュートリアルでもmigrateについて記述がありました。
part01で行ったpubspec.yamlを修正します。
null safetyに対応するためenglish_wordsのバージョンをあげます。
english_words: ^4.0.0-0  pub getした後に以下のコマンドを入力し、マイグレートします。
dart migrate --apply-changes ここまでで一旦アプリを起動してListViewが表示されていることを確認します。
step 1　リストにアイコンを追加する _RandomWordsStateに_savedというSetを追加します。
このSetにはユーザーがお気に入りした単語のペアが入ります。
SetはListと異なり、重複を許さず順番を保持し続けるという特性があります。
次に、_buildRowメソッドないにalreadySavedチェックを追加して単語のペアがお気に入りに追加されているかしていないかを確認します。
次に_buildRowにハートアイコンを追加します。
ListTileのtrailingにアイコンを追加します。
Widget _buildRow(WordPair pair) { final alreadySaved = _saved.contains(pair); return ListTile( title: Text( pair.asPascalCase, style: _biggerFont, ), trailing: Icon( alreadySaved ?</description>
    </item>
    
    <item>
      <title>Flutterチュートリアルやってみた part1</title>
      <link>https://www.tsuzuki817.com/posts/flutter/flutter-tutorial-part1/</link>
      <pubDate>Thu, 04 Mar 2021 04:08:10 +0900</pubDate>
      
      <guid>https://www.tsuzuki817.com/posts/flutter/flutter-tutorial-part1/</guid>
      <description>参考 作業リポジトリ =&amp;gt; https://github.com/tsuzukihashi/flutter-tutorial-part01  環境  作業日: 2020/03/07 OS: macOS Big Sur 11.2.1 PC: MacBook Pro (13-inch, M1, 2020)  初めに Flutterの勉強をするには公式のチュートリアルをやるのが一番だという情報を得たのでやっていき！
このチュートリアルでは、リストの無限スクロールをやりました。
Step1 アプリを作る Flutterのプロジェクトを新規に作ります。
lib/main.dartの中身を一度全て削除し、以下のように画面中央に&amp;quot;Hello World&amp;quot;と表示するように書き換えます。
import &amp;#39;package:flutter/material.dart&amp;#39;; void main() =&amp;gt; runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: &amp;#39;Welcom to Flutter&amp;#39;, home: Scaffold( appBar: AppBar( title: Text(&amp;#39;Welcome to Flutter&amp;#39;), ), body: Center( child: Text(&amp;#39;Hello World&amp;#39;), ), ), ); } } コードをコピペした際に、インデントがズレた時の対処法がありましたが、 VSCodeのプラグインが入っていればコードを保存する(⌘ + S)をするたびにフォーマットが走っていました。</description>
    </item>
    
    <item>
      <title>iOSDC全動画制覇シリーズ 001</title>
      <link>https://www.tsuzuki817.com/posts/iosdc/001/</link>
      <pubDate>Fri, 19 Feb 2021 00:40:05 +0900</pubDate>
      
      <guid>https://www.tsuzuki817.com/posts/iosdc/001/</guid>
      <description>iOSDC Japan 2016 08/19 Track A / フルSwiftでバイクフリマアプリRIDEを作って得た学び / huin 記念すべき一本目! huinさんでフルSwiftでバイクフリマアプリRIDEを作って得た学びです。
{スライド} {動画} {togetter}
RIDE フルSwift　+ Redux の構成
開発期間3ヶ月
 API部分だけをモジュール化をしている   アプリからは認証情報（APIキー）を渡して必要なメソッドを呼ぶだけのシンプル構成だそうです。
APIモジュールはレスポンス（JSON）をモデルにして変換してくれている。
なぜこのような構成にしているのか？
 アプリの都合をモデルに入れたくないとのこと！  Clean Architectureで言うところのEntityをフレームワークとして切り分けることで強制的に分離することにしている見たいです。
データはimmutableで定義している
データを加工して保持しておきたい場合などは、アプリ層でExtensionして実装している。</description>
    </item>
    
    <item>
      <title>iOSエンジニアとして知見を広めたい件</title>
      <link>https://www.tsuzuki817.com/posts/iosdc-all-first/</link>
      <pubDate>Wed, 17 Feb 2021 01:51:27 +0900</pubDate>
      
      <guid>https://www.tsuzuki817.com/posts/iosdc-all-first/</guid>
      <description>こんにちは！
最近はもっぱらflutterの勉強ばかりしています。
flutterだけ勉強するのも良いのですが、iOSエンジニアとして世界を広げたいのでまず手始めにiOSDCの全動画を見てブログを書いていこうかと思っています。
iOSDCのYouTubeチャンネルで古い順にして順番に見ていくことにします。
https://www.youtube.com/c/iOSDCJapan/videos?view=0&amp;amp;sort=da&amp;amp;flow=grid
これを見ている稀有な方も一緒にいかがでしょうか？
まずは2016年のOpening Moviewから律儀に見ます。 https://www.youtube.com/watch?v=D9MT-TdVSjo</description>
    </item>
    
    <item>
      <title>Flutterで作ったプロジェクトのBundleID・PckageNameを変更する方法と対策</title>
      <link>https://www.tsuzuki817.com/posts/flutter/flutter-package-bundle/</link>
      <pubDate>Wed, 03 Feb 2021 00:17:05 +0900</pubDate>
      
      <guid>https://www.tsuzuki817.com/posts/flutter/flutter-package-bundle/</guid>
      <description>普通にVSCodeやコマンドからFlutterプロジェクトを作るとBundleID・PackageNameはcom.example.hogehoge のように指定されてしまいます。
これを修正する方法を示すとともに、そうならないようにするVSCodeで開発している方向けの設定をご紹介します。
すでに作ってしまった場合の修正方法   iOS iOSの場合は一つだけ変更すれば良いので楽です。 FlutterプロジェクトのiOSディレクトリに移動します。
例
/my_app/ios ここで
xed . でXcodeでプロジェクトを開きます。
以下の画像のようにTARGETSのBundle Identifierを修正します。 以上で終わりです。
    Android Androidの場合は名前の修正とディレクトリの修正の二つがあります。
  ネーム変更 VSCodeでプロジェクトを開きます。 ⌘ + shift + fでプロジェクト全体の検索画面を開きます。 以下のように検索窓にcom.example.{プロジェクト名前}を入れて検索します。
検索窓の左側に下向きの矢印ボタンがあるのでそれをクリックします。 その後置換するための窓が出てきますので、そこに変更したいPackage Nameを入れて、右側にある一斉置換のボタンをクリックすると名前を変更することができます。
  ディレクトリ変更 Androidのデフォルトの言語がjavaかkotlinによって変わりますが、大体kotlinですので、以下のようなディレクトリ構成になっていると思います。
my_app/android/app/src/main/kotlin/com/example/my_app ですので、この/com/exampleの名前を設定したいPackage Nameに変更しておきます。
  以上で終わりです。
  VSCodeの場合のより良い方法 上記のようなことを毎回やるのはよろしくないので、次からは自動的にやってもらいたいと思います。
 Settings.jsonを開く ショートカットキーcommand + ,  organizationで検索し、DartのExtensionsのFlutter Create OrganizationからEdit in settings.jsonをクリックします。
開くと以下のようなjsonがあるはずです。
これのart.flutterCreateOrganizationがnullになっているため、ここを自身のorganizationを設定してあげます。
{ &amp;#34;[dart]&amp;#34;: { &amp;#34;editor.formatOnSave&amp;#34;: true, &amp;#34;editor.formatOnType&amp;#34;: true, &amp;#34;editor.</description>
    </item>
    
    <item>
      <title>Flutter入門！</title>
      <link>https://www.tsuzuki817.com/posts/flutter/entry-flutter/</link>
      <pubDate>Sat, 30 Jan 2021 04:08:10 +0900</pubDate>
      
      <guid>https://www.tsuzuki817.com/posts/flutter/entry-flutter/</guid>
      <description>はじめに 兼ねてより気になっていたFlutterというものを始めようかと思います。
2019年にヤフーに新卒入社した右も左もわからなかった自分が、運良くPayPayフリマのiOSチームに配属されて技術的にも人間的にも優れた先輩方に教わりながらiOSアプリ開発も少しずつできるようになってきました。
Swiftでの個人アプリ開発もつづけ、そろそろAndroidも対応した物を作りたいという気持ちが僅かながら芽生えてきました。
しかし、ネイティブで両方作るのは結構しんどいのでは？という気持ちもありまして、一粒で二度美味しいと評判のFlutterに手を出すことにしました。
Flutter FlutterはGoogleによって開発されているマルチプラットフォームで動作するモバイルアプリケーションUIフレームワークです。
開発言語はDartと呼ばれるもので、こちらもGoogleによって開発されています。
プラットフォームも言語もGoogleによって統率されており、なかなかGoogleが気合を入れていることが感じざるを得ないものとなっています。
Firebase周りとの連携もしやすいとも聞いているので、やるしかないです。
開発環境 開発環境はAndroid StudioとVSCodeが主流らしいです。
自分はVSCodeが見た目的に好きなのでそちらでやることにします。
インストールしてみる ※ Android Studio, Xcode, Homebrew, Cocoapodsがインストールされてる前提
Flutter自体はは公式サイトからzipファイルをダウンロードして任意の場所においてパスを指定する。
公式サイト
パスは任意の場所でよく、以下のようにbinまでしてあげれば良いです。
export PATH=&amp;#34;$PATH:$HOME/dev/flutter/bin&amp;#34; ここで
flutter doctor というコマンドを利用します。これでflutterが使えるのかどうか見てくれます。
さらに、修正方法も示してくれます。
続いて、VSCodeにFlutterのExtensionをインストールする。
コマンドパレットを開いて(⌘ + shift+ P)、flutterで検索するとNew Application Projectと出てくるのでそこからプロジェクトを作れます。
プロジェクトの名前を決定してあげると、プロジェクトが表示されます。
次にデバイスの選択方法です。
画面右下のデバイス領域をクリックすると、画面上部に選べるシミュレータが表示されます。
なかったら、Create Android emulatorしたり、iOSの場合、terminalで
open -a simulator と入力しても起動できるようです。（シラナカッタ）
アプリを実行してみる 右上の再生マークをクリックして実行できます。
以下のようにでもアプリが表示されればOK！ </description>
    </item>
    
    <item>
      <title>Privacy Policy</title>
      <link>https://www.tsuzuki817.com/posts/privacy-policy/</link>
      <pubDate>Fri, 29 Jan 2021 04:14:42 +0900</pubDate>
      
      <guid>https://www.tsuzuki817.com/posts/privacy-policy/</guid>
      <description>プライバシーポリシー Ryo Tsuzukihashi は、以下のとおり個人情報保護方針を定め、個人情報保護の仕組みを構築し、個人情報保護の重要性の認識と取組みを徹底することにより、個人情報の保護を推進致します。
個人情報の管理 Ryo Tsuzukihashi は、お客さまの個人情報を正確かつ最新の状態に保ち、個人情報への不正アクセス・紛失・破損・改ざん・漏洩などを防止するため、セキュリティシステムの維持・管理体制の整備徹底等の必要な措置を講じ、安全対策を実施し個人情報の厳重な管理を行ないます。
個人情報の利用目的 お客さまからお預かりした個人情報は、各アプリ内でのデータ保存、ランキングのみに利用します。
個人情報の第三者への開示・提供の禁止 Ryo Tsuzukihashi は、お客さまよりお預かりした個人情報を適切に管理し、次のいずれかに該当する場合を除き、個人情報を第三者に開示いたしません。 お客さまの同意がある場合 お客さまが希望されるサービスを行なうために当社が業務を委託する業者に対して開示する場合 法令に基づき開示することが必要である場合
個人情報の安全対策 Ryo Tsuzukihashi は、個人情報の正確性及び安全性確保のために、セキュリティに万全の対策を講じています。
##ご本人の照会
お客さまがご本人の個人情報の照会・修正・削除などをご希望される場合には、ご本人であることを確認の上、対応させていただきます。
法令、規範の遵守と見直し Ryo Tsuzukihashi は、保有する個人情報に関して適用される日本の法令、その他規範を遵守するとともに、本ポリシーの内容を適宜見直し、その改善に努めます。
お問い合せ Ryo Tsuzukihashi の個人情報の取扱に関するお問い合せは下記までご連絡ください。 Ryo Tsuzukihashi @tsuzuki817</description>
    </item>
    
    <item>
      <title>リンク集</title>
      <link>https://www.tsuzuki817.com/posts/test/</link>
      <pubDate>Fri, 29 Jan 2021 04:08:10 +0900</pubDate>
      
      <guid>https://www.tsuzuki817.com/posts/test/</guid>
      <description>iOSアプリ開発しています。仕事でも個人でも
SwiftUIが好物です。:dog:
趣味  個人アプリ制作 写真撮影 ドット絵  SNSや作ったアプリのリンク集  twitter qiita github facebook hatena App Store Privacy Policy SkyCode  </description>
    </item>
    
  </channel>
</rss>
